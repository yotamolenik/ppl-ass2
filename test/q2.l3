
(define last-element
   (lambda (lst)
      (if (eq? lst '()) 
        lst
        (last-element (cdr lst))
      )
   )
)

; car - first
; cdr - rest
; eq? lst '() - empty



;for is like let. let was in lecture(2nd parser lecture, rewriteLet) and is in the code

;(define (factorial n)
 ; (if (zero? n) 1
  ;  (* n (factorial (- n 1)))))

;(fibonacci 2)



(define power
  (lambda (n1 n2)
    (if (= n2 1)
          n2
       (* n1 (power n1 (- n2 1)))
    )
  )
)

(define sum-lst-power         ; (1 2 3) 2 -> 1^2 + 2^2 + 3^2
    (lambda (lst n)
      (if (eq? lst '() )  
         0
        (+ (power (car lst) n) (sum-lst-power (cdr lst) n)
      )
    )
)
   
 
(define num-from-digits    ; 248 = 2*10^2 + 4*10^1 + 8*10^0
  (lambda (lst)
    (if (eq? lst '() ) 
      0
      (+ (* (car lst) (power 10 (- (length lst) 1) ) ) (num-from-digits (cdr lst)) )
    )
  )
)
  

(define is-narcissistic ; 153 = 1^3 + 5^3 + 3^3
  (lambda (lst)
    (define ( x (num-from-digits lst)))
    (if ( = (sum-lst-power lst (length lst) )  x)
        #t
        #f
    )
  )
)
 

 ;Our Functions

(define length
  (lambda (lst)
    (if eq? lst '() 
      0
      (+ 1 (length (cdr lst)) ) 
    )
  )
)